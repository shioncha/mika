services:
  frontend:
    build: ./frontend
    ports:
      - 80:80
    networks:
      - frontend
    depends_on:
      backend:
        condition: service_started

  backend:
    build: ./backend
    expose:
      - 8080
    networks:
      - frontend
      - backend
    environment:
      - JWT_PRIVATE_KEY_BASE64=${JWT_PRIVATE_KEY_BASE64}
      - JWT_PUBLIC_KEY_BASE64=${JWT_PUBLIC_KEY_BASE64}
      - FRONTEND_URL=${FRONTEND_URL}
      - BACKEND_PORT=8080
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      - GIN_MODE=release
    depends_on:
      db:
        condition: service_healthy

  db:
    image: "postgres:17-alpine"
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - db-store:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 5s

volumes:
  db-store:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
